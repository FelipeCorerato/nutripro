name: Pull Request Checks

on:
  pull_request:
    branches: [ main, master, develop ]
    types: [opened, synchronize, reopened]

jobs:
  lint-and-build:
    name: Lint and Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        echo "🔧 Removing package-lock.json to ensure clean install"
        rm -f package-lock.json
        echo "📦 Installing dependencies with npm install"
        npm install
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Build project
      run: npm run build
    
    - name: Check build output
      run: |
        if [ -d ".next" ]; then
          echo "✅ Build successful - .next directory created"
          ls -la .next/
        else
          echo "❌ Build failed - .next directory not found"
          exit 1
        fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        echo "🔧 Removing package-lock.json to ensure clean install"
        rm -f package-lock.json
        echo "📦 Installing dependencies with npm install"
        npm install
    
    - name: Run Tests
      run: |
        echo "🧪 Running unit tests with Jest"
        npm test
    
    - name: Generate Test Coverage
      run: |
        echo "📊 Generating test coverage report"
        npm run test:coverage
      continue-on-error: true
    
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        echo "🔧 Removing package-lock.json to ensure clean install"
        rm -f package-lock.json
        echo "📦 Installing dependencies with npm install"
        npm install
    
    - name: Run Tests with Coverage
      run: |
        echo "🧪 Running tests with coverage for SonarQube"
        npm run test:coverage
    
    - name: Download Coverage Report
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: coverage-report
        path: coverage/
    
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  security-check:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [lint-and-build, test, sonarqube]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        echo "🔧 Removing package-lock.json to ensure clean install"
        rm -f package-lock.json
        echo "📦 Installing dependencies with npm install"
        npm install
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Check for vulnerabilities
      run: |
        if npm audit --audit-level=high --json > /dev/null 2>&1; then
          echo "🔍 Checking for high/critical vulnerabilities..."
          if npm audit --audit-level=high --json | grep -q '"high":\s*[1-9]\|"critical":\s*[1-9]'; then
            echo "❌ High or critical vulnerabilities found"
            npm audit --audit-level=high
            exit 1
          else
            echo "✅ No high or critical vulnerabilities found"
          fi
        else
          echo "✅ No vulnerabilities found"
        fi